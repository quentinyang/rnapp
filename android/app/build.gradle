apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"]
 * ]
 */

project.ext.react = [
    // the name of the generated asset file containing your JS bundle
    bundleAssetName: "index.android.bundle"
];

apply from: "react.gradle"

// Only needed in v1.8.0+ of the plugin
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    def debugChannels = ['dev', '']
    def myFile = file("customSetting.properties")
    Properties propFile = new Properties()
    propFile.load(new FileInputStream(myFile))

    defaultConfig {
        applicationId "com.xinyi.fy360"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 31
        versionName "1.4.0"
        // dex突破65535的限制
        multiDexEnabled true
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }

        manifestPlaceholders = [UMENG_CHANNEL_VALUE   : propFile.getProperty('UMENG_CHANNEL_VALUE_DEBUG'),
                                UMENG_APPKEY_VALUE    : propFile.getProperty('UMENG_APPKEY_VALUE_DEBUG'),
                                GETUIPUSH_APPID_VALUE   : propFile.getProperty('GETUIPUSH_APPID_VALUE_DEBUG'),
                                GETUIPUSH_APPKEY_VALUE   : propFile.getProperty('GETUIPUSH_APPKEY_VALUE_DEBUG'),
                                GETUIPUSH_APPSECRET_VALUE   : propFile.getProperty('GETUIPUSH_APPSECRET_VALUE_DEBUG'),
                                GETUIPUSH_MASTERSECRET_VALUE   : propFile.getProperty('GETUIPUSH_MASTERSECRET_VALUE_DEBUG'),
                                CODEPUSH_KEY_VALUE   : propFile.getProperty('CODEPUSH_KEY_VALUE_DEBUG')]

        buildConfigField "String", "CODE_PUSH_KEY", "\"" + manifestPlaceholders.CODEPUSH_KEY_VALUE + "\""
    }
    signingConfigs {
        debug {
        }
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug

            // rename package name
//            applicationVariants.all { variant ->
//                if (debugChannels.contains(variant.productFlavors[0].name)) {
//                    variant.outputs.each { output ->
//                        def outputFile = output.outputFile
//                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                            def fileName = "app_debug_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
//                            output.outputFile = new File(outputFile.parent, fileName)
//                        }
//                    }
//                }
//            }
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release

            // rename package name
            applicationVariants.all { variant ->
                if (!debugChannels.contains(variant.productFlavors[0].name)) {
                    variant.outputs.each { output ->
                        def outputFile = output.outputFile
                        if (outputFile != null && outputFile.name.endsWith('.apk')) {
                            def fileName = "app_release_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
                            output.outputFile = new File(outputFile.parent, fileName)
                        }
                    }
                }
            }
        }
    }


    productFlavors {
        dev {
            buildConfigField "String", "API_HOST", "\"http://360.master.stage.angejia.com/service/\""
        }

        //渠道
//        AppStore {}
//        QQ {}
//        A360 {}
//        BAIDU {}
//        HUAWEI {}
//        LIANXIANG {}
//        MEIZU {}
//        OPPO {}
//        VIVO {}
//        WANDOUJIA {}
//        XIAOMI {}
    }

    productFlavors.all { flavor ->
        if (!debugChannels.contains(name)) {
            flavor.manifestPlaceholders = [ UMENG_CHANNEL_VALUE     : name,
                                            UMENG_APPKEY_VALUE      : propFile.getProperty('UMENG_APPKEY_VALUE_RELEASE'),
                                            GETUIPUSH_APPID_VALUE    : propFile.getProperty('GETUIPUSH_APPID_VALUE_RELEASE'),
                                            GETUIPUSH_APPKEY_VALUE    : propFile.getProperty('GETUIPUSH_APPKEY_VALUE_RELEASE'),
                                            GETUIPUSH_APPSECRET_VALUE    : propFile.getProperty('GETUIPUSH_APPSECRET_VALUE_RELEASE'),
                                            GETUIPUSH_MASTERSECRET_VALUE    : propFile.getProperty('GETUIPUSH_MASTERSECRET_VALUE_RELEASE'),
                                            CODEPUSH_KEY_VALUE    : propFile.getProperty('CODEPUSH_KEY_VALUE_RELEASE')]

            buildConfigField "String", "CODE_PUSH_KEY", "\"" + flavor.manifestPlaceholders.CODEPUSH_KEY_VALUE + "\""
            buildConfigField "String", "API_HOST", "\"https://api.fangyuan360.cn/service/\""
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    //compile fileTree(dir: "libs", include: ["*.jar"])
    compile "com.android.support:appcompat-v7:23.0.1"
    compile "com.facebook.react:react-native:+"  // From node_modules
    compile project(':react-native-code-push')
    compile files('libs/alipaySdk-20160427.jar')

    // GeTui
    compile files('libs/GetuiSDK2.8.1.0.jar')
    compile files('libs/GetuiExt-2.0.3.jar')
    compile 'com.android.support:support-v4'

    // custom getui
    compile project(':getui')
    compile project(':deviceid')

    compile project(":react-native-device-info")
    compile fileTree(dir: "node_modules/react-native-device-info/android/libs", include: ["*.jar"])

    // UMeng
    compile 'com.umeng.analytics:analytics:latest.integration'

    compile(name:'actionlog-debug', ext:'aar')
    compile(name:'commonutils-debug', ext:'aar')

}